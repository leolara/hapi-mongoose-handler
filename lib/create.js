// Generated by CoffeeScript 1.6.1

/*
this is a generic create controller
*/


(function() {
  var _;

  _ = require('lodash');

  module.exports = function(options) {
    return function(request, reply) {
      var Model, err, errors, field, fields, herror, index, model, payload, val;
      payload = request.payload;
      Model = options.model;
      fields = options.fields;
      if (fields) {
        errors = {};
        for (index in fields) {
          field = fields[index];
          if (_.isFunction(field)) {
            val = field(payload[index], payload, request);
            if (!_.isUndefined(val)) {
              payload[index] = val;
            }
          } else {
            if (_.isFunction(field.transform)) {
              payload[index] = field.transform(payload[index], payload, request);
            }
            if (_.isFunction(field.validate)) {
              err = field.validate(payload[index], payload, request);
              if (err) {
                errors[index] = err;
              }
            }
            if (field.rename && where[index]) {
              payload[field.rename] = payload[index];
              delete payload[index];
            }
          }
        }
        if (!_.isEmpty(errors)) {
          herror = request.hapi.Error.badRequest();
          herror.output.payload = {
            fields: errors
          };
          return reply(herror);
        }
      }
      model = new Model(payload);
      return model.save(function(err) {
        var error, eventName, key, newVals, _ref;
        if (err) {
          if ((err.name != null) && err.name === 'ValidationError') {
            fields = {};
            _ref = err.errors;
            for (key in _ref) {
              error = _ref[key];
              fields[key] = key + ' is ' + error.type;
            }
            herror = request.hapi.Error.badRequest();
            herror.output.payload = {
              fields: fields
            };
            return reply(herror);
          } else {
            herror = request.hapi.Error.internal(err);
            return reply(herror);
          }
        } else {
          if (options.after) {
            newVals = options.after(model, request, 'create');
            if (newVals) {
              model = newVals;
            }
          }
          eventName = Model.modelName[0].toUpperCase() + Model.modelName.slice(1);
          request.server.emit('create' + eventName, model);
          eventName = Model.collection.name[0].toUpperCase() + Model.collection.name.slice(1);
          request.server.emit('create' + eventName, model);
          return reply(model);
        }
      });
    };
  };

}).call(this);
