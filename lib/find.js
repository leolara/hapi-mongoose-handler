// Generated by CoffeeScript 1.6.1

/*
CRUD find
*/


(function() {
  var _;

  _ = require('lodash');

  module.exports = function(options) {
    return function(request, reply) {
      var Model, config, err, errors, field, herror, index, limit, queries, query, skip, sort, val, where;
      query = _.merge(request.query, request.params);
      Model = options.model;
      limit = Number(query.limit);
      sort = query.sort || query.order || void 0;
      skip = Number(query.skip || query.offset) || void 0;
      where = _.transform(query, function(result, param, key) {
        if (key !== 'limit' && key !== 'offset' && key !== 'skip' && key !== 'sort' && key !== 'client') {
          if (_.isObject(param)) {
            param = _.transform(param, function(result, prop, key) {
              return result["$" + key] = prop;
            });
          }
          return result[key] = param;
        }
      });
      queries = options.queries;
      if (queries) {
        errors = {};
        for (index in queries) {
          field = queries[index];
          if (_.isFunction(field)) {
            val = field(where[index], where, request);
            if (!_.isUndefined(val)) {
              where[index] = val;
            }
          } else {
            if (_.isFunction(field.transform)) {
              where[index] = field.transform(where[index], where, request);
            }
            if (_.isFunction(field.validate)) {
              err = field.validate(where[index], where, request);
              if (err) {
                errors[index] = err;
              }
            }
            if (field.rename && where[index]) {
              where[field.rename] = where[index];
              delete where[index];
            }
          }
        }
        if (!_.isEmpty(errors)) {
          herror = request.hapi.Error.badRequest();
          herror.output.payload = {
            fields: errors
          };
          return reply(herror);
        }
      }
      config = {};
      if (options.config) {
        config = options.config(request.server.settings.app.api);
      }
      if (config.maxLimit) {
        if (_.isNaN(limit) || limit > config.maxLimit) {
          limit = config.maxLimit;
        }
      }
      if (config.defaultOrder && !sort) {
        sort = config.defaultOrder;
      }
      return Model.find(where).sort(sort).skip(skip).limit(limit).exec(function(err, models) {
        var modelValues, newVals;
        if (err) {
          return reply(request.hapi.Error.internal(err));
        }
        modelValues = [];
        models.forEach(function(model) {
          return modelValues.push(model);
        });
        if (options.after) {
          newVals = options.after(modelValues, where, request, 'find');
          if (newVals) {
            modelValues = newVals;
          }
        }
        return reply(modelValues);
      });
    };
  };

}).call(this);
