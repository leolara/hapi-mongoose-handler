// Generated by CoffeeScript 1.6.1

/*
CRUD update
*/


(function() {
  var _;

  _ = require('lodash');

  module.exports = function(options) {
    return function(request, reply) {
      var Model, err, errors, field, fields, herror, index, params, payload, result, val;
      params = request.params;
      payload = request.payload;
      if (options.omit) {
        payload = _.omit(payload, options.omit);
      }
      Model = options.model;
      fields = options.fields;
      if (fields) {
        errors = {};
        for (index in fields) {
          field = fields[index];
          if (_.isFunction(field)) {
            val = field(payload[index], payload, request);
            if (!_.isUndefined(val)) {
              payload[index] = val;
            }
          } else {
            if (_.isFunction(field.transform)) {
              result = field.transform(payload[index], payload, request);
              if (result) {
                payload[index] = result;
              }
            }
            if (payload[index] && _.isFunction(field.validate)) {
              err = field.validate(payload[index], payload, request);
              if (err) {
                herror = request.hapi.Error.badRequest(err);
                return reply(herror);
              }
            }
            if (field.rename && where[index]) {
              payload[field.rename] = payload[index];
              delete payload[index];
            }
          }
        }
        if (!_.isEmpty(errors)) {
          herror = request.hapi.Error.badRequest();
          error.output.payload = {
            fields: erros
          };
          return reply(herror);
        }
      }
      return Model.findOne(params).exec(function(err, model) {
        var canUpdate;
        if (err) {
          return reply(request.hapi.Error.internal(err));
        }
        if (!model) {
          return reply(request.hapi.Error.notFound(Model.modelName + " with id of" + params.id + " not found"));
        }
        canUpdate = options.check ? options.check(model, request, 'update') : true;
        if (canUpdate) {
          model.set(payload);
          return model.save(function() {
            var newReply;
            if (options.after) {
              newReply = options.after(model, request, 'update');
              if (newReply) {
                model = newReply;
              }
            }
            return reply(model);
          });
        } else {
          return reply(request.hapi.Error.unauthorized('permission denied'));
        }
      });
    };
  };

}).call(this);
